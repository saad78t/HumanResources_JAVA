package HumanResources;
import humanresourcesemployee.*;
import java.io.PrintStream;
import java.net.URL;
import java.util.ResourceBundle;
import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ListChooser;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.fxgui.ModalControllerInterface;
import fi.jyu.mit.fxgui.TextAreaOutputStream;
import humanhesourcescontract.Contract;
import humanresourcesemployee.Employee;
import humanresourcesemployee.HumanResources;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import humanhesourcescontract.Contract.*;

/**
 * @author Omistaja
 * @version 31.1.2019
 *
 */
public class ContractsGUIController implements ModalControllerInterface<HumanResources>, Initializable{
	
	
	/**
     * K‰sitell‰‰n uuden j‰senen lis‰‰minen
     */

	  @Override
	    public void initialize(URL url, ResourceBundle bundle) {
	        alusta();      
	    }

	  
	  
	   @FXML private ScrollPane panelContract;
 
	   @FXML private ListChooser<Contract> chooserContracts;

	    
	   @FXML private void handleNew() { // TODO: move inside a new method
		 try {	
		    	humanresources.newContract();
		    	Contract cont= humanresources.newContract();
		    	hae(cont.getContractNumber());
			}catch (RuntimeException e) {System.err.println();}
		    }
		    

	   public void setHumanResources(HumanResources hr) {
		    	this.humanresources=hr;
		    	}
	  

	 
	 @FXML void handleSearch() {
		   Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }
	  
	 
	    /**
	     * K‰sitell‰‰n tallennusk‰sky
	     */
	    @FXML private void handleSave() {
	        tallenna();
	    }
	    
	    
	    @FXML void handleDelete() {
	    	  Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    @FXML   void handleEdit() {
	    	  Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    /**
	     * K‰sitell‰‰n lopetusk‰sky
	     */
	    @FXML private void handleExit() {
	        tallenna();
	        Platform.exit();
	    }
	    
	    
	    @FXML void handleFirst() {
	    	 Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    
	    @FXML void handleLast() {
	    	 Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    @FXML void handleBack() {
	    	 Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }
	    

	    @FXML void handleNext() {
	    	Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    /**
	     * Tarkistetaan onko tallennus tehty
	     * @return true jos saa sulkaa sovelluksen, false jos ei
	     */
	    public boolean voikoSulkea() {
	        tallenna();
	        return true;
	    }
	    
	    /**
	     * Tietojen tallennus
	     */
	    private void tallenna() {
	        Dialogs.showMessageDialog("Tallennetetaan! Mutta ei toimi viel‰");
	    }

	    
	    @FXML private void handleSalaries() {
	    	ModalController.showModal(SalariesGUIController.class.getResource("SalariesGUIView.fxml"), "Salary", null, humanresources);
	    	/*
	    	  try {
	    		  FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("SalariesGUIView.fxml"));
	    		  Parent root1 = (Parent) fxmlLoader.load();
	    		  Stage stage = new Stage();
	    		  stage.setTitle("Salaries");
	    		  stage.setScene(new Scene(root1));  
	    		  stage.show();

	          } catch(Exception e) {
	             System.out.println("Can not load Window ");
	          }
	          */
	          
	     }
	    
	    
	    @FXML private void handleMainWindow() {
	    	// TODO: ModalController.closeStage(?? give here a component on your contract...fxml);
	    	
	    	ModalController.showModal(MainWindowGUIController.class.getResource("MainWindowGUIView.fxml"), "mainwindow", null, humanresources);
	    	
	    	/*
	    	try {
	    		  FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("MainWindowGUIView.fxml"));
	    		  Parent root1 = (Parent) fxmlLoader.load();
	    		  Stage stage = new Stage();
	    		  stage.setTitle("Personal Information");
	    		  stage.setScene(new Scene(root1));  
	    		  stage.show();

	          } catch(Exception e) {
	             System.out.println("Can not load Window ");
	          }
	          */
	     }
	    
	    //===========================================================================================    
	    // T‰st‰ eteenp‰in ei k‰yttˆliittym‰‰n suoraan liittyv‰‰ koodia    
	    
	    private HumanResources humanresources;
	    private TextArea areaContract = new TextArea();
	    private Contract contractKohdalla;
	    
	    
	    /**
	     * Tekee tarvittavat muut alustukset, nyt vaihdetaan GridPanen tilalle
	     * yksi iso tekstikentt‰, johon voidaan tulostaa j‰senten tiedot.
	     * Alustetaan myˆs j‰senlistan kuuntelija 
	     */
	    private void alusta() {
	        panelContract.setContent(areaContract);
	        areaContract.setFont(new Font("Courier New", 12));
	        panelContract.setFitToHeight(true);
	        
	        chooserContracts.clear();
	        chooserContracts.addSelectionListener(e -> naytaJasen());
	    }
	    
	    
	    /**
	     * N‰ytt‰‰ listasta valitun j‰senen tiedot, tilap‰isesti yhteen isoon edit-kentt‰‰n
	     */  
	    private void naytaJasen() {
	    	contractKohdalla = chooserContracts.getSelectedObject();

	        if (contractKohdalla == null) return;

	        areaContract.setText("");
	        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(areaContract)) {
	        	contractKohdalla.tulosta(os);
	        }
	    }
	    
	    
	    /**
	     * Hakee j‰senten tiedot listaan
	     * @param jnro j‰senen numero, joka aktivoidaan haun j‰lkeen
	     */
	    protected void hae(int enro) {
	        chooserContracts.clear();
	        int index = 0;
	        for (int i = 0; i <= humanresources.getContracts(); i++) {
	            Contract contract = humanresources.annaContract(i);
	            if (contract.getContractNumber() == enro) index = i;
	            chooserContracts.add(contract.getContractNumbers(), contract);
	        }
	       chooserContracts.setSelectedIndex(index); // t‰st‰ tulee muutosviesti joka n‰ytt‰‰ j‰senen
	    }

//
		@Override
		public HumanResources getResult() {
			// TODO Auto-generated method stub
			return humanresources;
		}


		@Override
		public void handleShown() {
			//	
		}



		@Override
		public void setDefault(HumanResources hr) {
			this.humanresources = hr;
		}
}