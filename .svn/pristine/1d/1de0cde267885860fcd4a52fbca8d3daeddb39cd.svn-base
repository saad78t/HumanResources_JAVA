package speciality;

//import java.util.ArrayList;
//import java.util.Collection;
import java.util.*;

import fi.jyu.mit.fxgui.Dialogs;
import humanresourcesemployee.SailoException;
import humanresourcessalaries.Salary;

public class Specialities  implements Iterable<Speciality> {

	 private String                      tiedostonNimi = "";
	   
   /** Taulukko specialities */
   private final Collection<Speciality> objects        = new ArrayList<Speciality>();
	   

	 /**
	  * Harrastusten alustaminen
	  */
     public Specialities() {
         // toistaiseksi ei tarvitse tehdä mitään
     }
     
     
     /**
      * Lisää uuden harrastuksen tietorakenteeseen.  Ottaa harrastuksen omistukseensa.
      * @param har lisättävä harrastus.  Huom tietorakenne muuttuu omistajaksi
      */
     public void lisaa( Speciality spe) {
         objects.add(spe);
     }
 

      /**
       * Lukee jäsenistön tiedostosta.  
       * TODO Kesken.
       * @param hakemisto tiedoston hakemisto
       * @throws SailoException jos lukeminen epäonnistuu
        */
       public void lueTiedostosta(String hakemisto) throws SailoException {
           tiedostonNimi = hakemisto + ".har";
           throw new SailoException("Ei osata vielä lukea tiedostoa " + tiedostonNimi);
       }
   
   
       /**
        * Tallentaa jäsenistön tiedostoon.  
        * TODO Kesken.
        * @throws SailoException jos talletus epäonnistuu
        */
       public void talleta() throws SailoException {
           throw new SailoException("Ei osata vielä tallettaa tiedostoa " + tiedostonNimi);
       }
   
   
       /**
        * Palauttaa kerhon harrastusten lukumäärän
        * @return harrastusten lukumäärä
        */
       public int getLkm() {
           return objects.size();
       }
       
       
    /**
      * Iteraattori kaikkien harrastusten läpikäymiseen
      * @return harrastusiteraattori
      * 
      * @example
      * <pre name="test">
      * #PACKAGEIMPORT
      * #import java.util.*;
      * 
      *  Harrastukset harrasteet = new Harrastukset();
      *  Harrastus pitsi21 = new Harrastus(2); harrasteet.lisaa(pitsi21);
      *  Harrastus pitsi11 = new Harrastus(1); harrasteet.lisaa(pitsi11);
      *  Harrastus pitsi22 = new Harrastus(2); harrasteet.lisaa(pitsi22);
      *  Harrastus pitsi12 = new Harrastus(1); harrasteet.lisaa(pitsi12);
      *  Harrastus pitsi23 = new Harrastus(2); harrasteet.lisaa(pitsi23);
      * 
      *  Iterator<Harrastus> i2=harrasteet.iterator();
      *  i2.next() === pitsi21;
      *  i2.next() === pitsi11;
      *  i2.next() === pitsi22;
      *  i2.next() === pitsi12;
      *  i2.next() === pitsi23;
      *  i2.next() === pitsi12;  #THROWS NoSuchElementException  
      *  
      *  int n = 0;
      *  int jnrot[] = {2,1,2,1,2};
      *  
      *  for ( Harrastus har:harrasteet ) { 
      *    har.getJasenNro() === jnrot[n]; n++;  
      *  }
      *  
      *  n === 5;
      *  
      * </pre>
      */
    @Override
    public Iterator<Speciality> iterator() {
        return objects.iterator();
    }


    /**
      * Haetaan kaikki jäsen harrastukset
      * @param tunnusnro jäsenen tunnusnumero jolle harrastuksia haetaan
      * @return tietorakenne jossa viiteet löydetteyihin harrastuksiin
      * @example
      * <pre name="test">
      * #import java.util.*;
      * 
      *  Harrastukset harrasteet = new Harrastukset();
      *  Harrastus pitsi21 = new Harrastus(2); harrasteet.lisaa(pitsi21);
      *  Harrastus pitsi11 = new Harrastus(1); harrasteet.lisaa(pitsi11);
      *  Harrastus pitsi22 = new Harrastus(2); harrasteet.lisaa(pitsi22);
      *  Harrastus pitsi12 = new Harrastus(1); harrasteet.lisaa(pitsi12);
      *  Harrastus pitsi23 = new Harrastus(2); harrasteet.lisaa(pitsi23);
      *  Harrastus pitsi51 = new Harrastus(5); harrasteet.lisaa(pitsi51);
      *  
      *  List<Harrastus> loytyneet;
      *  loytyneet = harrasteet.annaHarrastukset(3);
      *  loytyneet.size() === 0; 
      *  loytyneet = harrasteet.annaHarrastukset(1);
      *  loytyneet.size() === 2; 
      *  loytyneet.get(0) == pitsi11 === true;
      *  loytyneet.get(1) == pitsi12 === true;
      *  loytyneet = harrasteet.annaHarrastukset(5);
      *  loytyneet.size() === 1; 
      *  loytyneet.get(0) == pitsi51 === true;
      * </pre> 
      */
     public List<Speciality> annaSpecialities(int employeenumber) {
         var loydetyt = new ArrayList<Speciality>();
         for (Speciality spe : objects)
         if (spe.getEmployeeNro() == employeenumber) loydetyt.add(spe);
         return loydetyt;
     }
     

 /**
   * Testiohjelma harrastuksille
   * @param args ei käytössä
   */
      public static void main(String[] args) {
          Specialities specialities = new Specialities();
          Speciality pitsi1 = new Speciality();
          pitsi1.vastaaPitsinNyplays(2);
          Speciality pitsi2 = new Speciality();
          pitsi2.vastaaPitsinNyplays(1);
          Speciality pitsi3 = new Speciality();
          pitsi3.vastaaPitsinNyplays(2);
          Speciality pitsi4 = new Speciality();
          pitsi4.vastaaPitsinNyplays(2);
  
          specialities.lisaa(pitsi1);
          specialities.lisaa(pitsi2);
          specialities.lisaa(pitsi3);
          specialities.lisaa(pitsi2);
          specialities.lisaa(pitsi4);
  
          System.out.println("============= Harrastukset testi =================");
  
          List<Speciality> specialities2 = specialities.annaSpecialities(2);
  
          for (Speciality spe : specialities2 ) {
              System.out.print(spe.getEmployeeNro() + " ");
              spe.tulosta(System.out);
          }  
      }     
}
