package HumanResources;
import static HumanResources.ContractsDialogeController.getFieldId; 
import humanresourcesemployee.*;
import java.io.PrintStream;
import java.net.URL;
import java.sql.*;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import fi.jyu.mit.fxgui.Dialogs;
import fi.jyu.mit.fxgui.ListChooser;
import fi.jyu.mit.fxgui.ModalController;
import fi.jyu.mit.fxgui.ModalControllerInterface;
import fi.jyu.mit.fxgui.TextAreaOutputStream;
import humanhesourcescontract.Contract;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import humanhesourcescontract.Contract.*;

/**
 * @author Omistaja
 * @version 31.1.2019
 *
 */
public class ContractsGUIController implements ModalControllerInterface<HumanResources>, Initializable{
	
	int pos = 0; 
	
	/**
     * K‰sitell‰‰n uuden j‰senen lis‰‰minen
     */

	  @Override
	    public void initialize(URL url, ResourceBundle bundle) {
	        alusta();      
	    }

	  	  
       @FXML private TextField editContractNumber;
	   @FXML private TextField editEmployeeNumber;
	   @FXML private TextField editAnnualHolidays;
	   @FXML private TextField editDateofStarting;
	   @FXML private TextField editDateofexpirey;
	   @FXML private TextField editDailyHours;
	   @FXML private TextField editAdditionalTime;
	   @FXML private TextField editContractperiod; 
	   @FXML private Label labelVirhe;  
	   @FXML private GridPane gridContract;
	   @FXML private ScrollPane panelContract; 
	   @FXML private ListChooser<Contract> chooserContracts;

	    
	   @FXML private void handleNew() { // TODO: move inside a new method
//		   newContract();
		 try {	
		    	//humanresources.newContract();
		    	Contract cont= humanresources.newContract();
		    	hae(cont.getContractNumber());
			}catch (RuntimeException e) {System.err.println();}
}
		    

	   public void setHumanResources(HumanResources hr) {
		    	this.humanresources=hr;
		    	}
	  

	 
	 @FXML void handleSearch() {
		   Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }
	  
	 
	    /**
	     * K‰sitell‰‰n tallennusk‰sky
	     */
	    @FXML private void handleSave() {
	        tallenna();
	    }
	    
	    
	    @FXML void handleDelete() {
	    	  Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    @FXML   void handleEdit() {
//	    	  Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    	edit(1);   
	    }

	    
	    /**
	     * K‰sitell‰‰n lopetusk‰sky
	     */
	    @FXML private void handleExit() {
	        tallenna();
	        Platform.exit();
	    }
	    
	    
	    @FXML void handleFirst() {
	    	 Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    	 
  }

    
	    @FXML void handleLast() {
	    	 Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }

	    
	    @FXML void handleBack() {
	    	 Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    }
	    

	    @FXML void handleNext() {
//	    	Dialogs.showMessageDialog("Ei osata viel‰ lis‰t‰");
	    	pos++;
	    	if(pos<=BindList().size()) {
	    		ShowPosInfo(pos);
	    	}
	    	else {
	    		pos=BindList().size()-1;
	    		ShowPosInfo(pos);
	    		JOptionPane.showMessageDialog(null,"end");
	    	}
	    }

	    
	    /**
	     * Tarkistetaan onko tallennus tehty
	     * @return true jos saa sulkaa sovelluksen, false jos ei
	     */
	    public boolean voikoSulkea() {
	        tallenna();
	        return true;
	    }
	    
	    
	    private void edit(int k){
	    	 if ( contractKohdalla == null ) return; 
	    	 try {
	        Contract contract = ContractsDialogeController.kysyContract(null,contractKohdalla.clone(),k); 
	        if ( contract == null ) return; 
	        //System.out.println(contract.getContractNumber());
	        //System.out.println(contractKohdalla.getContractNumber());
	        humanresources.korvaaTaiLisaa(contract); 
	        hae(contract.getContractNumber());
	    	 } catch (CloneNotSupportedException e) { 
	    		            // 
	         } catch (SailoException e) { 
	    	 Dialogs.showMessageDialog(e.getMessage()); 
	    		 } 
//	   		ContractsDialogeController.kysyContract(null,contractKohdalla); 
	   }       	     
	    
	    
	    /**
	     * Tietojen tallennus
	     */
	    private String tallenna() {
	    	 try {
	             humanresources.tallenna();
	             return null;
	         } catch (SailoException ex) {
	             Dialogs.showMessageDialog("Tallennuksessa ongelmia! " + ex.getMessage());
	             return ex.getMessage();
	         }  
	    }

	    
	    @FXML private void handleSalaries() {
	    	ModalController.showModal(SalariesGUIController.class.getResource("SalariesGUIView.fxml"), "Salary", null, humanresources);
	    	/*
	    	  try {
	    		  FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("SalariesGUIView.fxml"));
	    		  Parent root1 = (Parent) fxmlLoader.load();
	    		  Stage stage = new Stage();
	    		  stage.setTitle("Salaries");
	    		  stage.setScene(new Scene(root1));  
	    		  stage.show();

	          } catch(Exception e) {
	             System.out.println("Can not load Window ");
	          }
	          */
	          
	     }
	    
	    
	    @FXML private void handleMainWindow() {
	    	// TODO: ModalController.closeStage(?? give here a component on your contract...fxml);
	    	
	    	ModalController.showModal(MainWindowGUIController.class.getResource("MainWindowGUIView.fxml"), "mainwindow", null, humanresources);
	    	
	    	/*
	    	try {
	    		  FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("MainWindowGUIView.fxml"));
	    		  Parent root1 = (Parent) fxmlLoader.load();
	    		  Stage stage = new Stage();
	    		  stage.setTitle("Personal Information");
	    		  stage.setScene(new Scene(root1));  
	    		  stage.show();

	          } catch(Exception e) {
	             System.out.println("Can not load Window ");
	          }
	          */
	     }
	    
	    //===========================================================================================    
	    // T‰st‰ eteenp‰in ei k‰yttˆliittym‰‰n suoraan liittyv‰‰ koodia    
	    
	    private HumanResources humanresources;
	    private TextArea areaContract = new TextArea();
	    private Contract contractKohdalla;
	    private TextField[] edits;
	    private int kentta = 0;
	    
	    
	    public static Connection getConnection() {
	    	Connection cn;
	    	try {
	    		cn=DriverManager.getConnection("jdbc:mysql://localhost/test_db","root","");
	    		return cn;
	    	}catch (Exception ex) {
	    		ex.printStackTrace();
	    	}
	    	return null;
	    }
	    
	    
	    public static List<Contract> BindList(){
	    	try {
	    		Connection con =getConnection();
	    		Statement st = con.createStatement();
	    		ResultSet rs = st.executeQuery("select * form contracts");
	    		List<Contract> list = new ArrayList<Contract>();
	    		while (rs.next()) {
	    			Contract u = new Contract (Integer.parseInt(rs.getString("ContractNumber")),
	    					Integer.parseInt(rs.getString("EmployeeNumber")),
	    					Integer.parseInt(rs.getString("AnnualHolidays")),	
	    					rs.getString("DateOfStarting"), rs.getString("DateOfExpiry"),
	    					Integer.parseInt(rs.getString("DailyHours")),
	    					Integer.parseInt(rs.getString("AdditionalTime")),
	    			        rs.getString("ContractPeriod")
	    			        );
	    			list.add(u);
	    		}
	    		return list;
	    	    }catch(Exception ex) {
		    		ex.printStackTrace();
		    	}
	    	return null;
	    }	    
	
	    
public void ShowPosInfo(int index) {
	editContractNumber.setText(Integer.toString(BindList().get(index).getContractNumber()));
	editEmployeeNumber.setText(Integer.toString(BindList().get(index).getEmployeeNumber()));
	editAnnualHolidays.setText(Integer.toString(BindList().get(index).getAnnualHolidays()));
}
	    /**
	     * Kysyt‰‰n tiedoston nimi ja luetaan se
	     * @return true jos onnistui, false jos ei
	     */
	     public boolean avaa() {
	          lueTiedosto("contracts.dat");
	           return true;
	        }
	    
	    
	     /**
	      * Luo uuden j‰senen jota aletaan editoimaan 
	      */
	         protected void newContract() {  
	        	  try {  
	                Contract uusi = new Contract(1,2,3,"s","a",4,5,"a");
	                uusi = ContractsDialogeController.kysyContract(null, uusi,1);    
	                if ( uusi == null ) return;
	                uusi.rekisteroi();       
	                humanresources.lisaa(uusi);  
	                hae(uusi.getContractNumber());
	             } catch (SailoException e) {
	                 Dialogs.showMessageDialog("It is not allowed to add more " + e.getMessage());
	                 return;
	             }
	               
//	               hae(uusi.getEmployeeNumber());
	         }
	         
	         
	    /**
	     * Tekee tarvittavat muut alustukset, nyt vaihdetaan GridPanen tilalle
	     * yksi iso tekstikentt‰, johon voidaan tulostaa j‰senten tiedot.
	     * Alustetaan myˆs j‰senlistan kuuntelija 
	     */
	    private void alusta() {
	    	
    	chooserContracts.clear();	   	
   	    chooserContracts.addSelectionListener(e -> naytaJasen());	   	
   	    edits = ContractsDialogeController.luoKentat(gridContract); 	   	
   	    for (TextField edit: edits)  	   	
        if ( edit != null ) {  	   	
            edit.setEditable(false);  	   	
            edit.setOnMouseClicked(e -> { if ( e.getClickCount() > 1 ) edit(getFieldId(e.getSource(),0)); });  	   	
            edit.focusedProperty().addListener((a,o,n) -> kentta = getFieldId(edit,kentta));     	
 }   
	    	
	        panelContract.setContent(areaContract);
	        areaContract.setFont(new Font("Courier New", 12));
//	        panelContract.setFitToHeight(true);
//	        
//	        chooserContracts.clear();
//	        chooserContracts.addSelectionListener(e -> naytaJasen());
//	        
//	        edits = new TextField [] {editContractNumber,editEmployeeNumber,editAnnualHolidays,
//	        		 editDateofStarting,editDateofexpirey,editDailyHours,editAdditionalTime,editContractperiod};
	    }
	    
	    
	    /**
	     * N‰ytt‰‰ listasta valitun j‰senen tiedot, tilap‰isesti yhteen isoon edit-kentt‰‰n
	     */  
	    private void naytaJasen() {
	    	contractKohdalla = chooserContracts.getSelectedObject();

	        if (contractKohdalla == null) {
	        	return;
	        }

	        ContractsDialogeController.naytaContract(edits, contractKohdalla);
	        
	        areaContract.setText("");
	        try (PrintStream os = TextAreaOutputStream.getTextPrintStream(areaContract)) {
	        	contractKohdalla.tulosta(os);
	        }
	    }
	    
	    
	    /**
	     * Hakee j‰senten tiedot listaan
	     * @param jnro j‰senen numero, joka aktivoidaan haun j‰lkeen
	     */
	    protected void hae(int enro) {
	        chooserContracts.clear();
	        int index = 0;
	        for (int i = 0; i < humanresources.getContracts(); i++) {
	            Contract contract = humanresources.annaContract(i);
	            if (contract.getContractNumber() == enro) index = i;
	            chooserContracts.add(contract.getContractNumbers(), contract);
	        }
	       chooserContracts.setSelectedIndex(index); // t‰st‰ tulee muutosviesti joka n‰ytt‰‰ j‰senen
	    }

	    
	    /**
	     * Alustaa kerhon lukemalla sen valitun nimisest‰ tiedostosta
	     * @param nimi tiedosto josta kerhon tiedot luetaan
	     * @return null jos onnistuu, muuten virhe tekstin‰
	     */
	    protected String lueTiedosto(String c) {
	        //kerhonnimi = nimi;
	       // setTitle("Kerho - " + kerhonnimi);
	        try {
	            humanresources.lueTiedostosta(c);
	            hae(0);
	            return null;
	        } catch (SailoException e) {
	            hae(0);
	            String virhe = e.getMessage(); 
	            if ( virhe != null ) Dialogs.showMessageDialog(virhe);
	            return virhe;
	        }
	     }
	   
	    
//
		@Override
		public HumanResources getResult() {
			// TODO Auto-generated method stub
			return humanresources;
		}


		@Override
		public void handleShown() {
			//	
		}


		@Override
		public void setDefault(HumanResources hr) {
			this.humanresources = hr;
//			naytaJasen();
		}
}