package humanresourcessalaries;

import static humanresourcesemployee.EmployNumberChecking.arvoHetu;
import static humanresourcesemployee.EmployNumberChecking.rand;

import java.io.OutputStream;
import java.io.PrintStream;

import fi.jyu.mit.ohj2.Mjonot;
import humanresourcesemployee.Employee;


public class Salary {
private static int seuraavaNro    = 1;
	
    private int        EmployeeNumber;
    private int        ContractNumber;
    private int        Mainsalary ;
    private int        Month;
    private int        Year;
    private int        Bounce;
    private int        Loance;
    private int        TransportaitionAllowance;
    private int        NetSalary ;
    
    
    public static void main(String[] args) {
		Salary aku= new Salary();
		Salary aku2= new Salary();
		
		aku.rekisteroi();
		aku2.rekisteroi();
		
		aku.tulosta(System.out);
		aku2.tulosta(System.out);
		
		aku.vastaaAkuAnkka();
		aku2.vastaaAkuAnkka();
		aku.tulosta(System.out);
		aku2.tulosta(System.out);
	}
    
    
    public int rekisteroi() {
		 if (EmployeeNumber!=0) return EmployeeNumber;
		 EmployeeNumber = seuraavaNro;
	        seuraavaNro++;
	        return EmployeeNumber;
	    }
	 
	 
    /**
     * Asettaa tunnusnumeron ja samalla varmistaa ett‰
     * seuraava numero on aina suurempi kuin t‰h‰n menness‰ suurin.
     * @param nr asetettava tunnusnumero
     */
 public void setEmployeeNumber(int nr){
	 EmployeeNumber = nr;
        if (EmployeeNumber >= seuraavaNro) seuraavaNro = EmployeeNumber + 1;
 }
    
 
	 public int getEmployeeNumber() {
	        return EmployeeNumber;
	    }
	 
	 
	 public void tulosta(PrintStream out) {
	        out.println(String.format("%03d", EmployeeNumber, 3) + "  " + EmployeeNumber + "  "
	                + ContractNumber+" "+   Mainsalary+" "+ Month);
	        out.println("  " + Year + "  " + Bounce + " " + Loance+" "+TransportaitionAllowance + " "+ NetSalary);
	 }
	        
	        //why we need this method
	   	 public void tulosta(OutputStream os) {
	   	        tulosta(new PrintStream(os));
	   	    }
	   	 
	   	 public void vastaaAkuAnkka(int EmployeeNumber) {
             EmployeeNumber    = 1 + rand(1000,9999);
             ContractNumber    = 32132131;
             Mainsalary        = 1000;
             Month             = 5;
             Year              = 2018;
             Bounce            = 20;
             Loance            =100; 
             TransportaitionAllowance     = 0;
             NetSalary                    = 920;
             
  }

		
		
	 public String getEmployeeNumbers() {
				return Integer.toString(EmployeeNumber);
			}
	
	public void vastaaAkuAnkka() {
		 int EmployeeNumber = arvoHetu();
	   vastaaAkuAnkka(EmployeeNumber);
	  }



	/**
	 * Palauttaa j‰senen tiedot merkkijonona jonka voi tallentaa tiedostoon.
	 * @return j‰sen tolppaeroteltuna merkkijonona 
	 * @example
	 * <pre name="test">
	 *   Jasen jasen = new Jasen();
	 *   jasen.parse("   3  |  Ankka Aku   | 030201-111C");
	 *   jasen.toString().startsWith("3|Ankka Aku|030201-111C|") === true; // on enemm‰kin kuin 3 kentt‰‰, siksi loppu |
	 * </pre>  
	 */
	@Override
	public String toString() {
	    return "" +
	            getEmployeeNumber() + "|" +
	            EmployeeNumber + "|" +
	            ContractNumber + "|" +
	            Mainsalary + "|" +
	            Month + "|" +
	            Year + "|" +
	            Bounce + "|"+
	            Loance + "|"+            
	            TransportaitionAllowance + "|" +
	            NetSalary + "|" ;	               	            	                           
	}

	
	/**
     * Selvit‰‰ j‰senen tiedot | erotellusta merkkijonosta
     * Pit‰‰ huolen ett‰ seuraavaNro on suurempi kuin tuleva tunnusNro.
     * @param rivi josta j‰senen tiedot otetaan
     * 
     * @example
     * <pre name="test">
     *   Jasen jasen = new Jasen();
     *   jasen.parse("   3  |  Ankka Aku   | 030201-111C");
     *   jasen.getTunnusNro() === 3;
     *   jasen.toString().startsWith("3|Ankka Aku|030201-111C|") === true; // on enemm‰kin kuin 3 kentt‰‰, siksi loppu |
     *
     *   jasen.rekisteroi();
     *   int n = jasen.getTunnusNro();
     *   jasen.parse(""+(n+20));       // Otetaan merkkijonosta vain tunnusnumero
     *   jasen.rekisteroi();           // ja tarkistetaan ett‰ seuraavalla kertaa tulee yht‰ isompi
     *   jasen.getTunnusNro() === n+20+1;
     *     
     * </pre>
     */
    public void parse(String rivi) {
        StringBuffer sb = new StringBuffer(rivi);
        setEmployeeNumber(Mjonot.erota(sb, '|', getEmployeeNumber()));
        EmployeeNumber = Mjonot.erota(sb, '|', EmployeeNumber);
        ContractNumber = Mjonot.erota(sb, '|', ContractNumber);
        Mainsalary = Mjonot.erota(sb, '|', Mainsalary);
        Month = Mjonot.erota(sb, '|', Month);
        Year = Mjonot.erota(sb, '|', Year);
        Bounce = Mjonot.erota(sb, '|', Bounce);
        Loance = Mjonot.erota(sb, '|', Loance);
        TransportaitionAllowance = Mjonot.erota(sb, '|', TransportaitionAllowance);
        NetSalary = Mjonot.erota(sb, '|', NetSalary);       
    }
    
    
    @Override
    public boolean equals(Object salary) {
        if ( salary == null ) return false;
        return this.toString().equals(salary.toString());
    }


    @Override
    public int hashCode() {
        return EmployeeNumber;
    }
    
    
    /**
          * Tehd‰‰n identtinen klooni j‰senest‰
          * @return Object kloonattu j‰sen
          * @example
          * <pre name="test">
          * #THROWS CloneNotSupportedException 
          *   Jasen jasen = new Jasen();
          *   jasen.parse("   3  |  Ankka Aku   | 123");
          *   Jasen kopio = jasen.clone();
          *   kopio.toString() === jasen.toString();
          *   jasen.parse("   4  |  Ankka Tupu   | 123");
          *   kopio.toString().equals(jasen.toString()) === false;
          * </pre>
          */
         @Override
         public Salary clone() throws CloneNotSupportedException {
             Salary New = (Salary) super.clone();
             return New;
         }	   
}
