
package humanresourcesemployee;
import static humanresourcesemployee.EmployNumberChecking.*;

import java.io.OutputStream;
import java.io.PrintStream;

import fi.jyu.mit.ohj2.Mjonot;

/**
 * @author Omistaja
 *
 */
public class Employee implements Cloneable{

	
	/*
	public Employee(String firstName, String surname, String nationality) {
		FirstName = firstName;
		Surname = surname;
		Nationality = nationality;
	}
*/

	//private int tunnusNro;
    private static int seuraavaNro    = 1;
    
    private int        EmployeeNumber ;
    private String     FirstName      = "";
    private String     Surname        = "";
    private String     Nationality    = "";
    private String     DateofBirth    = "";
    private String     speciality     = "";
    private String     Address        = "";
    private String     PostCode       = "";
    private String     PostalAddress  = "";
    private int        Hourrealization = 0;
    private int        PhoneNumber    = 0;
    private double     Salary         = 0;
   
	  public static void main(String[] args) {
		Employee aku= new Employee();
		Employee aku2= new Employee();
		
		aku.rekisteroi();
		aku2.rekisteroi();
		
		aku.tulosta(System.out);
		aku2.tulosta(System.out);
		
		aku.vastaaAkuAnkka();
		aku2.vastaaAkuAnkka();
		aku.tulosta(System.out);
		aku2.tulosta(System.out);
		
	}
	
	
	/**
     * Antaa j‰senelle seuraavan rekisterinumeron.
     * @return j‰senen uusi tunnusNro
     * @example
     * <pre name="test">
     *   Employee aku1 = new Employee();
     *   aku1.getTunnusNro() === 0;
     *   aku1.rekisteroi();
     *   aku1.rekisteroi();
     *   aku1.rekisteroi();
     *   Employee aku2 = new Employee();
     *   aku2.rekisteroi();
     *   aku2.rekisteroi();
     *   int n1 = aku1.getTunnusNro();
     *   int n2 = aku2.getTunnusNro();
     *   n1 === n2-1;
     * </pre>
     */
	 public int rekisteroi() {
		 if (EmployeeNumber!=0) return EmployeeNumber;
		 EmployeeNumber = seuraavaNro;
	        seuraavaNro++;
	        return EmployeeNumber;
	    }

	 
	 
	 /**
	     * Asettaa tunnusnumeron ja samalla varmistaa ett‰
	     * seuraava numero on aina suurempi kuin t‰h‰n menness‰ suurin.
	     * @param nr asetettava tunnusnumero
	     */
	 public void setEmployeeNumber(int nr){
		 EmployeeNumber = nr;
	        if (EmployeeNumber >= seuraavaNro) seuraavaNro = EmployeeNumber + 1;
	 }
	 
	 public int getEmployeeNumber() {
	        return EmployeeNumber;
	    }

	 
	 //tulosta = results
	 public void tulosta(PrintStream out) {
	        out.println(String.format("%03d", EmployeeNumber, 3) + "  " + EmployeeNumber + "  "
	                + FirstName+" "+ Surname+" "+ Nationality);
	        out.println("  " + DateofBirth + "  " + speciality + " " + Address);
	        out.println("  " + PostCode + "  " +PostalAddress+ " " + Hourrealization+
	        		 " "+" W:" + PhoneNumber+"  "+  Salary +" e." );
	 }
	 
	 //why we need this method
	 public void tulosta(OutputStream os) {
	        tulosta(new PrintStream(os));
	    }
	 
	 //why depended on String type to distinguish between similar names?
	 public void vastaaAkuAnkka(int EmployeeNumber) {
	               EmployeeNumber = 0 + rand(1000,9999);
	               FirstName      = "Ankka";
	               Surname        = "Aku";
	               Nationality    ="Finnish";
	               DateofBirth    = "1.7.1950";
	               PhoneNumber    = 12-123245;
	               speciality     = "Engineer";
	               Address        = "Ankkakuja 6";
	               PostCode       = "12345";
	               PostalAddress  = "ANKKALINNA";
	               Hourrealization = 0;	             
	               Salary         = 200;
	    }


	public String getName() {
		return FirstName;	
	}
	 
	
	public String setName(String FirstName) {
		 this.FirstName=FirstName;
		 return null;
	}
	
	
	public String setSurName(String S) {
		 Surname=S;
		  return null;
	}
	
	
	public String getSurName() {
		return Surname;	
	}
	

	public String setNationality(String n) {
	      Nationality=n;
		  return null;
	}
	
	public String getNationality() {
		return Nationality;	
	}
	
	
	public String setAddress(String a) {
		Address = a;
		return null;
	}
	
	
	  public String getAddress() {
		return Address;
	}


	public void vastaaAkuAnkka() { //arvoHetu=Id number
		 int EmployeeNumber = arvoHetu();
	     vastaaAkuAnkka(EmployeeNumber);
	}
	
	  
	  
	  /**
	     * Palauttaa j‰senen tiedot merkkijonona jonka voi tallentaa tiedostoon.
	     * @return j‰sen tolppaeroteltuna merkkijonona 
	     * @example
	     * <pre name="test">
	     *   Jasen jasen = new Jasen();
	     *   jasen.parse("   3  |  Ankka Aku   | 030201-111C");
	     *   jasen.toString().startsWith("3|Ankka Aku|030201-111C|") === true; // on enemm‰kin kuin 3 kentt‰‰, siksi loppu |
	     * </pre>  
	     */
	    @Override
	    public String toString() {
	        return "" +
	                getEmployeeNumber() + "|" +
	                FirstName + "|" +
	                Surname + "|" +
	                Nationality + "|" +
	                DateofBirth + "|" +
	                PhoneNumber + "|" +
	                speciality  + "|" +
	                Address + "|" +
	                PostCode + "|" +
	                PostalAddress + "|" +
	                Hourrealization + "|" +
	                Salary + "|" ;	              
	    }
	    
	    
	  /**
	     * Selvit‰‰ j‰senen tiedot | erotellusta merkkijonosta
	     * Pit‰‰ huolen ett‰ seuraavaNro on suurempi kuin tuleva tunnusNro.
	     * @param rivi josta j‰senen tiedot otetaan
	     * 
	     * @example
	     * <pre name="test">
	     *   Jasen jasen = new Jasen();
	     *   jasen.parse("   3  |  Ankka Aku   | 030201-111C");
	     *   jasen.getTunnusNro() === 3;
	     *   jasen.toString().startsWith("3|Ankka Aku|030201-111C|") === true; // on enemm‰kin kuin 3 kentt‰‰, siksi loppu |
	     *
	     *   jasen.rekisteroi();
	     *   int n = jasen.getTunnusNro();
	     *   jasen.parse(""+(n+20));       // Otetaan merkkijonosta vain tunnusnumero
	     *   jasen.rekisteroi();           // ja tarkistetaan ett‰ seuraavalla kertaa tulee yht‰ isompi
	     *   jasen.getTunnusNro() === n+20+1;
	     *     
	     * </pre>
	     */
	    public void parse(String rivi) {
	        StringBuffer sb = new StringBuffer(rivi);
	        setEmployeeNumber(Mjonot.erota(sb, '|', getEmployeeNumber()));
	        FirstName = Mjonot.erota(sb, '|', FirstName);
	        Surname = Mjonot.erota(sb, '|', Surname);
	        Nationality = Mjonot.erota(sb, '|', Nationality);
	        DateofBirth = Mjonot.erota(sb, '|', DateofBirth);
	        PhoneNumber = Mjonot.erota(sb, '|', PhoneNumber);
	        speciality = Mjonot.erota(sb, '|', speciality);
	        Address = Mjonot.erota(sb, '|', Address);
	        PostCode = Mjonot.erota(sb, '|', PostCode);
	        PostalAddress = Mjonot.erota(sb, '|', PostalAddress);
	        Hourrealization = Mjonot.erota(sb, '|', Hourrealization);
	        Salary= Mjonot.erota(sb, '|', Salary);
	        
	    }
	    
	    @Override
	    public boolean equals(Object employee) {
	        if ( employee == null ) return false;
	        return this.toString().equals(employee.toString());
	    }


	    @Override
	    public int hashCode() {
	        return EmployeeNumber;
	    }
	    
	    
	    /**
	          * Tehd‰‰n identtinen klooni j‰senest‰
	          * @return Object kloonattu j‰sen
	          * @example
	          * <pre name="test">
	          * #THROWS CloneNotSupportedException 
	          *   Jasen jasen = new Jasen();
	          *   jasen.parse("   3  |  Ankka Aku   | 123");
	          *   Jasen kopio = jasen.clone();
	          *   kopio.toString() === jasen.toString();
	          *   jasen.parse("   4  |  Ankka Tupu   | 123");
	          *   kopio.toString().equals(jasen.toString()) === false;
	          * </pre>
	          */
	         @Override
	         public Employee clone() throws CloneNotSupportedException {
	             Employee New = (Employee) super.clone();
	             return New;
	         }	    
	 }
