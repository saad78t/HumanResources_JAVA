package humanresourcessalaries;
import static humanresourcesemployee.EmployNumberChecking.arvoHetu;
import static humanresourcesemployee.EmployNumberChecking.rand;

import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Comparator;

import fi.jyu.mit.ohj2.Mjonot;
import humanhesourcescontract.Contract;
import humanresourcesemployee.Employee;

public class Salary  implements Cloneable {
private int seuraavaNro    = 1;
	
    private int        EmployeeNumber;
    private int        ContractNumber;
    private double        Mainsalary ;
    private int        Month;
    private int        Year;
    private double        Bounce;
    private double        Loance;
    private double        TransportaitionAllowance;
    private double     NetSalary ;
    
    
    /** 
     * Jäsenten vertailija 
     */ 
    public static class Vertailija implements Comparator<Salary> { 
        private int k;  
         
        @SuppressWarnings("javadoc") 
        public Vertailija(int k) { 
            this.k = k; 
        } 
         
        @Override 
        public int compare(Salary salary1, Salary salary2) { 
            return salary1.getAvain(k).compareToIgnoreCase(salary2.getAvain(k)); 
//       	 return salary1.ContractNumber.compareToIgnoreCase(salary2.ContractNumber);
        } 
    } 
    
    
    public String getAvain(int k) { 
        switch ( k ) { 
        case 0: return "" + ContractNumber ;
        case 1: return "" + EmployeeNumber ;
        case 2: return "" + Mainsalary ;             
        case 3: return "" + Month;                   
        case 4: return "" + Year;                       
        case 5: return "" + Bounce;                    
        case 6: return "" + Loance;                    
        case 7: return "" + TransportaitionAllowance;
        case 8: return "" + NetSalary ;
       default: return "Äääl" ;              
        } 
    } 
    
    
    public int getKenttia() {
        return 9;
    }
    
    
    public int ekaKentta() {
        return 0;
    }
    
    public Salary() {
    	//
    }
    
    
    public static void main(String[] args) {
		Salary aku= new Salary();
		Salary aku2= new Salary();
		
		aku.rekisteroi();
		aku2.rekisteroi();
		
		aku.tulosta(System.out);
		aku2.tulosta(System.out);
		
		aku.vastaaAkuAnkka();
		aku2.vastaaAkuAnkka();
		aku.tulosta(System.out);
		aku2.tulosta(System.out);
	}
    
    
    public int rekisteroi() {
		 if (EmployeeNumber!=0) return EmployeeNumber;
		 EmployeeNumber = seuraavaNro;
	        seuraavaNro++;
	        return EmployeeNumber;
	}
	 
	 
    /**
     * Asettaa tunnusnumeron ja samalla varmistaa että
     * seuraava numero on aina suurempi kuin tähän mennessä suurin.
     * @param nr asetettava tunnusnumero
     */
 public void setEmployeeNumber(int nr){
	 EmployeeNumber = nr;
     if (EmployeeNumber >= seuraavaNro) seuraavaNro = EmployeeNumber + 1;
 }
    
 
	 public int getEmployeeNumber() {
	    return EmployeeNumber;
 }
	 
	 
	 public int getContractNumber() {
		    return ContractNumber;
	 }
		 
	 
	 public void tulosta(PrintStream out) {
        out.println(String.format("%03d", EmployeeNumber, 3) + "  " + EmployeeNumber + "  "
        + ContractNumber+" "+   Mainsalary+" "+ Month);
        out.println("  " + Year + "  " + Bounce + " " + Loance+" "+TransportaitionAllowance + " "+ NetSalary);
 }
	        
	        //why we need this method
	   	 public void tulosta(OutputStream os) {
	   	        tulosta(new PrintStream(os));
	   	    }
	   	 
	   	 
	   	public String anna(int k) {
	        switch ( k ) {
	        case 0: return "" +    EmployeeNumber;           
	        case 1: return "" +    ContractNumber;           
	        case 2: return "" +    Mainsalary ;              
	        case 3: return "" +    Month;                    
	        case 4: return "" +    Year;                     
	        case 5: return "" +    Bounce;                   
	        case 6: return "" +    Loance;                   
	        case 7: return "" +    TransportaitionAllowance; 
	        case 8: return "" +    NetSalary ;               	      
	        
	        default: return "Äääliö";
	        }
	    }
	   	
	   	
	   	public String aseta(int k, String jono) {
	        String tjono = jono.trim();
	        StringBuffer sb = new StringBuffer(tjono);
	        switch ( k ) {
	        case 0:
	            setEmployeeNumber(Mjonot.erota(sb, '§', getEmployeeNumber()));
	            return null;
	        case 1:
	        	ContractNumber =Integer.valueOf(tjono);
	            return null;                                                            
	        case 2:                                                 
	        	  Mainsalary   =Double.valueOf(tjono );                
	            return null;                                                    
	        case 3:                                                               
	        	Month          =Integer.valueOf(tjono );                                     
	            return null;                                                    
	        case 4:                                            
	        	 Year          =Integer.valueOf( tjono );                 	                
	            return null;                                   
	        case 5:                                              
	        	 Bounce        =Double.valueOf(tjono);                            
	            return null;                                            
	        case 6:
	        	 Loance        =Double.valueOf(tjono );
	            return null;
	        case 7:
	        	 TransportaitionAllowance=Double.valueOf( tjono );
	            return null;
	        case 8:
	        	  NetSalary=Double.valueOf( tjono );
	              return null;        
	        default:
	            return "ÄÄliö";
	        }
	    }

	   	
	    public String getKysymys(int k) {
	        switch ( k ) {        
	        case 0: return   "EmployeeNumber";
	        case 1: return   "ContractNumber ";
	        case 2: return   "Mainsalary ";
	        case 3: return   "Month";
	        case 4: return   "Year";
	        case 5: return   "Bounce";
	        case 6: return   "Loance";
	        case 7: return   "TransportaitionAllowance";
	        case 8: return   "NetSalary";
	        default: return    ""  ;	
	        }                 
	    }
	   	
	    
	   	 public void vastaaAkuAnkka(int EmployeeNumber) {
             EmployeeNumber    = 1 + rand(1000,9999);
             ContractNumber    = 32132131;
             Mainsalary        = 1000;
             Month             = 5;
             Year              = 2018;
             Bounce            = 20;
             Loance            =100; 
             TransportaitionAllowance     = 0;
             NetSalary                    = 920;             
  }

				
	 public String getEmployeeNumbers() {
	    return Integer.toString(EmployeeNumber);
  }
	
	 
	public void vastaaAkuAnkka() {
		 int EmployeeNumber = arvoHetu();
	   vastaaAkuAnkka(EmployeeNumber);
 }



	/**
	 * Palauttaa jäsenen tiedot merkkijonona jonka voi tallentaa tiedostoon.
	 * @return jäsen tolppaeroteltuna merkkijonona 
	 * @example
	 * <pre name="test">
	 *   Jasen jasen = new Jasen();
	 *   jasen.parse("   3  |  Ankka Aku   | 030201-111C");
	 *   jasen.toString().startsWith("3|Ankka Aku|030201-111C|") === true; // on enemmäkin kuin 3 kenttää, siksi loppu |
	 * </pre>  
	 */
 @Override
    public String toString() {
    	 StringBuffer sb = new StringBuffer("");
         String erotin = "";
         for (int k = 0; k < getKenttia(); k++) {
             sb.append(erotin);
             sb.append(anna(k));
             erotin = "|";
         }
         return sb.toString();
         
		//the old code
//	    return "" +
//	            getEmployeeNumber() + "|" +
//	            EmployeeNumber + "|" +
//	            ContractNumber + "|" +
//	            Mainsalary + "|" +
//	            Month + "|" +
//	            Year + "|" +
//	            Bounce + "|"+
//	            Loance + "|"+            
//	            TransportaitionAllowance + "|" +
//	            NetSalary + "|" ;	               	            	                           
	}

	
	/**
     * Selvitää jäsenen tiedot | erotellusta merkkijonosta
     * Pitää huolen että seuraavaNro on suurempi kuin tuleva tunnusNro.
     * @param rivi josta jäsenen tiedot otetaan
     * 
     * @example
     * <pre name="test">
     *   Jasen jasen = new Jasen();
     *   jasen.parse("   3  |  Ankka Aku   | 030201-111C");
     *   jasen.getTunnusNro() === 3;
     *   jasen.toString().startsWith("3|Ankka Aku|030201-111C|") === true; // on enemmäkin kuin 3 kenttää, siksi loppu |
     *
     *   jasen.rekisteroi();
     *   int n = jasen.getTunnusNro();
     *   jasen.parse(""+(n+20));       // Otetaan merkkijonosta vain tunnusnumero
     *   jasen.rekisteroi();           // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
     *   jasen.getTunnusNro() === n+20+1; 
     * </pre>
     */
    public void parse(String rivi) {
    	 StringBuffer sb = new StringBuffer(rivi);
         for (int k = 0; k < getKenttia(); k++)
         aseta(k, Mjonot.erota(sb, '|'));
         
    	//the old code
//        StringBuffer sb = new StringBuffer(rivi);
//        setEmployeeNumber(Mjonot.erota(sb, '|', getEmployeeNumber()));
//        EmployeeNumber = Mjonot.erota(sb, '|', EmployeeNumber);
//        ContractNumber = Mjonot.erota(sb, '|', ContractNumber);
//        Mainsalary = Mjonot.erota(sb, '|', Mainsalary);
//        Month = Mjonot.erota(sb, '|', Month);
//        Year = Mjonot.erota(sb, '|', Year);
//        Bounce = Mjonot.erota(sb, '|', Bounce);
//        Loance = Mjonot.erota(sb, '|', Loance);
//        TransportaitionAllowance = Mjonot.erota(sb, '|', TransportaitionAllowance);
//        NetSalary = Mjonot.erota(sb, '|', NetSalary);       
    }
    
    
    public boolean equals(Salary salary) {
  	  if ( salary == null ) return false;
        for (int k = 0; k < getKenttia(); k++)
            if ( !anna(k).equals(salary.anna(k)) ) return false;
        return true;
    }
      
    
    @Override
    public boolean equals(Object salary) {
        if ( salary == null ) return false;
        return this.toString().equals(salary.toString());
    }


    @Override
    public int hashCode() {
        return EmployeeNumber;
    }
    
    
    /**
      * Tehdään identtinen klooni jäsenestä
      * @return Object kloonattu jäsen
      * @example
      * <pre name="test">
      * #THROWS CloneNotSupportedException 
      *   Jasen jasen = new Jasen();
      *   jasen.parse("   3  |  Ankka Aku   | 123");
      *   Jasen kopio = jasen.clone();
      *   kopio.toString() === jasen.toString();
      *   jasen.parse("   4  |  Ankka Tupu   | 123");
      *   kopio.toString().equals(jasen.toString()) === false;
      * </pre>
      */
     @Override
     public Salary clone() throws CloneNotSupportedException {
         Salary New = (Salary) super.clone();
         return New;
     }	   
}
