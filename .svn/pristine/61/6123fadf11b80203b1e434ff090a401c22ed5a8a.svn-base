package humanresourcessalaries;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import fi.jyu.mit.fxgui.Dialogs;
import humanresourcesemployee.Employee;
import humanresourcesemployee.SailoException;

public class Salaries {

	private static final int MAX_Salaries   = 5;
    private int              lkm           = 0;    
    private Salary[] objects= new Salary[MAX_Salaries];
    private String tiedostonPerusNimi = "salary"; 
    private boolean muutettu = false;
    
    public Salaries() {
    	//
    }
    
    
    public void lisaa(Salary salary)  throws SailoException {
        if (lkm > objects.length) throw new SailoException("Liikaa alkioita");
        this.objects[lkm] = salary;
        lkm++;
    }
    
    
    public Salary anna(int i) throws IndexOutOfBoundsException {
        if (i < 0 || lkm <= i)
            throw new IndexOutOfBoundsException("Laiton indeksi: " + i);
        return objects[i];
    }
    
    
    public int getLkm() {
        return this.lkm;
    }
    
    
    public Salary newSalary() {
	    Salary neww = new Salary();
	    neww.rekisteroi();
	    neww.vastaaAkuAnkka();
	    try {
	        lisaa(neww);
	          return neww;
	    } catch (SailoException e) {
	        Dialogs.showMessageDialog("Ongelmia uuden luomisessa " + e.getMessage());
	      
	    }
	    //hae(neww.getEmployeeNumber());
	    return null;
}
    
	public static void main(String[] args) {
		Salaries salaries = new Salaries();
		
		Salary aku= new Salary();
		Salary aku2= new Salary();
		
		aku.rekisteroi();
		aku.vastaaAkuAnkka();
		aku2.rekisteroi();
		aku2.vastaaAkuAnkka();
		
		  try {
		salaries.lisaa(aku);
		salaries.lisaa(aku2);
		
		  } catch (SailoException ex) {
	            System.out.println(ex.getMessage());
	        }
		  System.out.println("============= Salaries test =================");
		  for (int i = 0; i < salaries.getLkm(); i++) {
              Salary salary = salaries.anna(i);
              System.out.println("Employee nro: " + i);
              salary.tulosta(System.out);
          }
	}
	
	
	/** 
	  * Palauttaa varakopiotiedoston nimen 
	  * @return varakopiotiedoston nimi 	
	  */   
	    public String getBakNimi() { 
	        return tiedostonPerusNimi + ".bak"; 
	    } 
	 
	
	   public void tallenna() throws SailoException { 
//	        if ( !muutettu ) return; 
	        File fbak = new File(getBakNimi()); 
	        File ftied = new File(getTiedostonNimi()); 
	        fbak.delete(); // if .. System.err.println("Ei voi tuhota"); 
	        ftied.renameTo(fbak); // if .. System.err.println("Ei voi nimetä"); 
	        try ( PrintWriter fo = new PrintWriter(new FileWriter(ftied.getCanonicalPath())) ) { 
	           // fo.println(getKokoNimi()); 
	            fo.println(objects.length); 
	            for (Salary salary : objects) { 
	            	if (salary != null)
	                fo.println(salary.toString()); 
	            } 
	            //} catch ( IOException e ) { // ei heitä poikkeusta 
	            //  throw new SailoException("Tallettamisessa ongelmia: " + e.getMessage()); 
	        } catch ( FileNotFoundException ex ) { 
	            throw new SailoException("Tiedosto " + ftied.getName() + " ei aukea"); 
	        } catch ( IOException ex ) { 
	            throw new SailoException("Tiedoston " + ftied.getName() + " kirjoittamisessa ongelmia"); 
	        } 
	        muutettu = false; 
	    }

	   
	public String getTiedostonNimi() { 
		        return getTiedostonPerusNimi() + ".dat"; 
		    } 
	
	
   public String getTiedostonPerusNimi() {
       return tiedostonPerusNimi;
   }

   
   public void setTiedostonPerusNimi(String nimi) { 
       tiedostonPerusNimi = nimi; 
   }

   
	public void lueTiedostosta(String tied) throws SailoException { 
		 
       setTiedostonPerusNimi(tied); 

       try ( BufferedReader fi = new BufferedReader(new FileReader(getTiedostonNimi())) ) { 
        String rivi = fi.readLine(); 

           if ( rivi == null ) throw new SailoException("Maksimikoko puuttuu"); 

           // int maxKoko = Mjonot.erotaInt(rivi,10); // tehdään jotakin 

           while ( (rivi = fi.readLine()) != null ) { 
               rivi = rivi.trim(); 

               if ( "".equals(rivi) || rivi.charAt(0) == ';' ) continue;  
               Salary salary = new Salary(); 
               salary.parse(rivi); // voisi olla virhekäsittely 
               lisaa(salary);
           } 
           muutettu = false; 
       } catch ( FileNotFoundException e ) { 
           throw new SailoException("Tiedosto " + getTiedostonNimi() + " ei aukea"); 

       } catch ( IOException e ) { 
           throw new SailoException("Ongelmia tiedoston kanssa: " + e.getMessage()); 
       } 
   }  
	
	
   public void lueTiedostosta() throws SailoException { 
       lueTiedostosta(getTiedostonPerusNimi()); 
    }

   
   /** 
        * Palauttaa Kerhon koko nimen 
        * @return Kerhon koko nimi merkkijononna 
        */ 
     //  public String getKokoNimi() { 
     // return kokoNimi; 
     //  } 
   
}
