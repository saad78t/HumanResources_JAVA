package humanhesourcescontract;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;

import fi.jyu.mit.fxgui.Dialogs;
import humanresourcesemployee.Employee;
import humanresourcesemployee.SailoException;

public class Contracts {
	private static final int MAX_Contracts   = 5;
    private int              lkm           = 0;
    private String tiedostonPerusNimi ="contracts";
    private Contract[] objects= new Contract[MAX_Contracts];
    private boolean muutettu = false; 
    
    
    public Contracts() {
    	//
    }
    
    public void lisaa(Contract contract)   {
    	 if (lkm >= objects.length)  {
             objects = Arrays.copyOf(objects, objects.length+10);
           }      
           objects[lkm++] = contract;
        
//        this.objects[lkm] = contract;
//        lkm++;
    }
    
   
    public Contract anna(int i) throws IndexOutOfBoundsException {
        if (i < 0 || lkm <= i)
            throw new IndexOutOfBoundsException("Laiton indeksi: " + i);
        return objects[i];
        
    }
    
    
    public int getLkm() {
        return this.lkm;
    }
    
    
    public Contract newContract() {
	    Contract neww = new Contract(1,2,3,"s","a",4,5,"a");
	    neww.rekisteroi();
	    neww.vastaaAkuAnkka();
//	    try {
	        lisaa(neww);
	          return neww;
//	    } catch (SailoException e) {
//	        Dialogs.showMessageDialog("Ongelmia uuden luomisessa " + e.getMessage());
	      
//	    }
	    //hae(neww.getEmployeeNumber());
//	    return null;
}
    
    public void korvaaTaiLisaa(Contract contract) throws SailoException {
		 int id = contract.getContractNumber();
		 for(int i =0; i<lkm; i++) {
			 //System.out.println(objects[i].getContractNumber());
			 if(objects[i].getContractNumber()==id) {
				 System.out.println("Are we here?");  //just for testing
				 objects[i]= contract;
				 muutettu=true;
				 return;
			 }
		 }
		 lisaa(contract);
	  }
    
    
    public static void main(String[] args)  {
		Contracts contracts = new Contracts();
		
		Contract aku= new Contract(1,2,3,"s","a",4,5,"a");
		Contract aku2= new Contract(1,2,3,"s","a",4,5,"a");
		
		aku.rekisteroi();
		aku.vastaaAkuAnkka();
		aku2.rekisteroi();
		aku2.vastaaAkuAnkka();
		
//		  try {
		contracts.lisaa(aku);
		contracts.lisaa(aku2);
		
//		  } catch (SailoException ex) {
//	            System.out.println(ex.getMessage());
//	        }
		  System.out.println("============= Contracts test =================");
		  for (int i = 0; i < contracts.getLkm(); i++) {
              Contract contract = contracts.anna(i);
              System.out.println("Contract nro: " + i);
              contract.tulosta(System.out);
          }
	}
    
       
    /** 
	  * Palauttaa varakopiotiedoston nimen 
	  * @return varakopiotiedoston nimi 	
	  */   
	    public String getBakNimi() { 
	        return tiedostonPerusNimi + ".bak"; 
 } 
	    
	    
	    public void tallenna() throws SailoException { 
//	        if ( !muutettu ) return; 
	        File fbak = new File(getBakNimi()); 
	        File ftied = new File(getTiedostonNimi()); 
	        fbak.delete(); // if .. System.err.println("Ei voi tuhota"); 
	        ftied.renameTo(fbak); // if .. System.err.println("Ei voi nimetä"); 
	        try ( PrintWriter fo = new PrintWriter(new FileWriter(ftied.getCanonicalPath())) ) { 
	           // fo.println(getKokoNimi()); 
	            fo.println(objects.length); 
	            for (Contract contract : objects) { 
	            	if (contract != null)
	                fo.println(contract.toString()); 
	            } 
	            //} catch ( IOException e ) { // ei heitä poikkeusta 
	            //  throw new SailoException("Tallettamisessa ongelmia: " + e.getMessage()); 
	        } catch ( FileNotFoundException ex ) { 
	            throw new SailoException("Tiedosto " + ftied.getName() + " ei aukea"); 
	        } catch ( IOException ex ) { 
	            throw new SailoException("Tiedoston " + ftied.getName() + " kirjoittamisessa ongelmia"); 
	        } 
	        muutettu = false; 
	    }

	   
	public String getTiedostonNimi() { 
		        return getTiedostonPerusNimi() + ".dat"; 
		    } 
	
	
	public String getTiedostonPerusNimi() {
        return tiedostonPerusNimi;
    }
	
	
	 public void setTiedostonPerusNimi(String nimi) { 
	        tiedostonPerusNimi = nimi; 
	    }
	 
	 
	 public void lueTiedostosta(String tied) throws SailoException { 
		 
	        setTiedostonPerusNimi(tied); 
	 
	        try ( BufferedReader fi = new BufferedReader(new FileReader(getTiedostonNimi())) ) { 
		            
	            String rivi = fi.readLine(); 
	 
	            if ( rivi == null ) throw new SailoException("Maksimikoko puuttuu"); 
		 
	            while ( (rivi = fi.readLine()) != null ) { 
	                rivi = rivi.trim(); 
	 
	                if ( "".equals(rivi) || rivi.charAt(0) == ';' ) continue;  
	                Contract contract = new Contract(1,2,3,"s","a",4,5,"a"); 
	                contract.parse(rivi); // voisi olla virhekäsittely 
	                lisaa(contract);
	            } 
	            muutettu = false; 
	        } catch ( FileNotFoundException e ) { 
	            throw new SailoException("Tiedosto " + getTiedostonNimi() + " ei aukea"); 
	 
	        } catch ( IOException e ) { 
	            throw new SailoException("Ongelmia tiedoston kanssa: " + e.getMessage()); 
	        } 
	    }  
		
	 
	 public void lueTiedostosta() throws SailoException { 
	        lueTiedostosta(getTiedostonPerusNimi()); 
	     }
}
